Dockerfile 是一个文本文件，其内包含了一条条的指令(Instruction)，
每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。
	如对commit的例子中:
	touch Dockerfile
	FROM nginx
	RUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html

FROM 指定基础镜像
	定制镜像是以一个镜像为基础，在其上进行定制。而 FROM 就是指定基础镜像，
	Dockerfile 中 FROM 是必备的指令，并且必须是第一条指令。
	Docker 还存在一个特殊的镜像，名为 scratch。
	这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。

RUN 执行命令
其格式有两种：
	shell 格式：RUN <命令>，就像直接在命令行中输入的命令一样。
		刚才写的 Dockrfile 中的 RUN 指令就是这种格式。
	exec 格式：RUN ["可执行文件", "参数1", "参数2"]，这更像是函数调用中的格式。
	例如;
		FROM debian:jessie
	    RUN apt-get update
	    RUN apt-get install -y gcc libc6-dev make
	    RUN wget -O redis.tar.gz "http://download.redis.io/releases/redis-3.2.5.tar.gz"
	    RUN mkdir -p /usr/src/redis
	    RUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1
	    RUN make -C /usr/src/redis
	    RUN make -C /usr/src/redis install
	Dockerfile 中每一个指令都会建立一层，每一个 RUN 的行为，就和刚才我们手工建立镜像的过程一样：
	新建立一层，在其上执行这些命令，执行结束后，commit 这一层的修改，构成新的镜像。
		而上面的这种写法，创建了 7 层镜像。这是完全没有意义的，
		而且很多运行时不需要的东西，都被装进了镜像里，
		比如编译环境、更新的软件包等等。结果就是产生非常臃肿、非常多层的镜像，
		不仅仅增加了构建部署的时间，也很容易出错。
		这是很多初学 Docker 的人常犯的一个错误。
	Union FS 是有最大层数限制的，比如 AUFS，曾经是最大不得超过 42 层，现在是不得超过 127 层。
	上面的 Dockerfile 正确的写法应该是这样：

		FROM debian:jessie
		RUN buildDeps='gcc libc6-dev make' \
		    && apt-get update \
		    && apt-get install -y $buildDeps \
		    && wget -O redis.tar.gz "http://download.redis.io/releases/redis-3.2.5.tar.gz" \
		    && mkdir -p /usr/src/redis \
		    && tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \
		    && make -C /usr/src/redis \
		    && make -C /usr/src/redis install \
		    && rm -rf /var/lib/apt/lists/* \
		    && rm redis.tar.gz \
		    && rm -r /usr/src/redis \
		    && apt-get purge -y --auto-remove $buildDeps

构建镜像
	docker build 命令进行镜像构建。其格式为：
		docker build [选项] <上下文路径/URL/->
		如:docker build -t nginx:v3 .
		在这里我们指定了最终镜像的名称 -t nginx:v3，
		构建成功后，我们可以像之前运行 nginx:v2 那样来运行这个镜像，其结果会和 nginx:v2 一样。

	镜像构建上下文（Context）
		docker build中的路径.认为是Dockerfile 所在路径，这么理解其实是不准确的,这是在指定上下文路径
		docker build 的工作原理:
		Docker 在运行时分为 Docker 引擎（也就是服务端守护进程）和客户端工具。
		Docker 的引擎提供了一组 REST API，被称为 Docker Remote API，
		而如 docker 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能。
		因此，虽然表面上我们好像是在本机执行各种 docker 功能，
		但实际上，一切都是使用的远程调用形式在服务端（Docker 引擎）完成。
		也因为这种 C/S 设计，让我们操作远程服务器的 Docker 引擎变得轻而易举。

		当我们进行镜像构建的时候，并非所有定制都会通过 RUN 指令完成，
		经常会需要将一些本地文件复制进镜像，比如通过 COPY 指令、ADD 指令等。
		而 docker build 命令构建镜像，其实并非在本地构建，而是在服务端，也就是 Docker 引擎中构建的。
		当构建的时候，用户会指定构建镜像上下文的路径，
		docker build 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎。
		这样 Docker 引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件。
		如果在 Dockerfile 中这么写：
			COPY ./package.json /app/
			这并不是要复制执行 docker build 命令所在的目录下的 package.json，
			也不是复制 Dockerfile 所在目录下的 package.json，
			而是复制 上下文（context） 目录下的 package.json。

		因此，COPY 这类指令中的源文件的路径都是相对路径。
		在默认情况下，如果不额外指定 Dockerfile 的话，会将上下文目录下的名为 Dockerfile 的文件作为 Dockerfile。
			实际上 Dockerfile 的文件名并不要求必须为 Dockerfile，而且并不要求必须位于上下文目录中，
			比如可以用 -f ../Dockerfile.php 参数指定某个文件作为 Dockerfile。
		当然，一般大家习惯性的会使用默认的文件名 Dockerfile，以及会将其置于镜像构建上下文目录中。

	其它 docker build 的用法

	直接用 Git repo 进行构建
		docker build https://github.com/twang2218/gitlab-ce-zh.git#:8.14
		这行命令指定了构建所需的 Git repo，并且指定默认的 master 分支，构建目录为 /8.14/，
		然后 Docker 就会自己去 git clone 这个项目、切换到指定分支、并进入到指定目录后开始构建。

	用给定的 tar 压缩包构建
		docker build http://server/context.tar.gz
		Docker 引擎会下载这个包，并自动解压缩，以其作为上下文，开始构建。

	从标准输入中读取 Dockerfile 进行构建
		docker build - < Dockerfile
		或
		cat Dockerfile | docker build -

	从标准输入中读取上下文压缩包进行构建
		docker build - < context.tar.gz
		如果发现标准输入的文件格式是 gzip、bzip2 以及 xz 的话，
		将会使其为上下文压缩包，直接将其展开，将里面视为上下文，并开始构建。













