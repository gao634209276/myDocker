http://blog.csdn.net/zjin_hua/article/details/52041757
http://blog.opskumu.com/docker.html
https://github.com/docker/docker-registry/blob/master/README.md

搜索镜像
	# docker search 镜像名

拉取镜像
	# docker pull 镜像名
	docker pull [选项] [Docker Registry地址]<仓库名>:<标签>
	Docker Registry地址:地址的格式一般是<域名/IP>[:端口号]。默认地址是Docker	Hub。
	仓库名:如之前所说,这里的仓库名是两段式名称,既<用户名>/<软件名>。
	对于	Docker Hub,如果不给出用户名,则默认为library,也就是官方镜像。

查看所用镜像
	# docker images
	列表包含了仓库名、标签、镜像	ID、创建时间以及所占用的空间。
	Docker镜像是多层存储结构,并且可以继承、复用,因此不同镜像可能会因为使用相同的基础镜像,从而拥有共同的层。
	虚悬镜像
		镜像列表中,还可以看到一个特殊的镜像,这个镜像既没有仓库名,也没有标签,均为 <none> 。
		这个镜像原本是有镜像名和标签的,随着官方镜像维护,发布了新版本后,
		重新 docker pull xxx 时,这个镜像名被转移到了新下载的镜像身上,
		而旧的镜像上的这个名称则被取消,从而成为了<none>	。
		这类无标签镜像也被称为	虚悬镜像(dangling	image);可以用下面的命令专门显示这类镜像:
			docker images -f dangling=true
		一般来说,虚悬镜像已经失去了存在的价值,是可以随意删除的,可以用下面的命令删除。
			docker rmi $(docker images -q -f dangling=true)
	中间层镜像
		为了加速镜像构建、重复利用资源,Docker	会利用中间层镜像。
		所以在使用一段时间后,可能会看到一些依赖的中间层镜像。
		默认的 docker	images 列表中只会显示顶层镜像,如果希望显示包括中间层镜像在内的所有镜像的话,需要加-a 参数。
			$docker images -a
	列出部分镜像
		如:根据仓库名列出镜像:
			docker	images	ubuntu
		列出特定的某个镜像,也就是说指定仓库名和标签
			docker	images	ubuntu:16.04
		使用过滤器参数--filter,或者简写-f 。
			docker images -f since=mongo:3.2
		想查看某个位置之前的镜像也可以,只需要把	 since 换成 before 即可。
		此外,如果镜像构建时,定义了 LABEL	 ,还可以通过 LABEL 来过滤。
			docker	images	-f	label=com.example.version=0.1
	以特定格式显示
		默认情况下，docker images 会输出一个完整的表格，但是我们并非所有时候都会需要这些内容。
		实际应用:
		利用 docker images 把所有的虚悬镜像的 ID 列出来，便于交给 docker rmi 命令作为参数来删除指定的这些镜像，
			docker images -q
		--filter 配合 -q 产生出指定范围的 ID 列表，然后送给另一个 docker 命令作为参数，
		从而针对这组实体成批的进行某种操作
		如:直接列出镜像结果，并且只包含镜像ID和仓库名
			docker images --format "{{.ID}}: {{.Repository}}"
		打算以表格等距显示，并且有标题行，和默认一样，不过自己定义列：
			docker images --format "table {{.ID}}\t{{.Repository}}\t{{.Tag}}"

提交镜像(docker commit)
	以定制一个 Web 服务器为例子:
	用 nginx 镜像启动一个容器，命名为 webserver，并且映射了 80 端口，
		docker run --name webserver -d -p 80:80 nginx
	访问http://localhost/会看到默认的 Nginx 欢迎页面。
	使用 docker exec 命令进入容器，修改页面内容。
		docker exec -it webserver bash
		echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html
		exit
	我们修改了容器的文件，也就是改动了容器的存储层。我们可以通过 docker diff 命令看到具体的改动。
	运行一个容器的时候（如果不使用卷的话），我们做的任何文件修改都会被记录于容器存储层里。
	而 Docker 提供了一个 docker commit 命令，可以将容器的存储层保存下来成为镜像。
	docker commit 的语法格式为：
	docker commit [选项] <容器ID或容器名> [<仓库名>[:<标签>]]
		docker commit \
		    --author "Tao Wang <twang2218@gmail.com>" \
		    --message "修改了默认网页" \
		    webserver \
		    nginx:v2
	-author 是指定修改的作者，而 --message 则是记录本次修改的内容。
	这点和 git 版本控制相似，不过这里这些信息可以省略留空。
	可以在 docker images 中看到这个新定制的镜像
		docker images nginx
	还可以用 docker history 具体查看镜像内的历史记录，
		docker history nginx:v2
	新的镜像定制好后，我们可以来运行这个镜像。
		docker run --name web2 -d -p 81:80 nginx:v2
	可以直接访问 http://localhost:81 看到结果，其内容应该和之前修改后的 webserver 一样。

	慎用 docker commit
		1,由于命令的执行，还有很多文件被改动或添加了,那会有大量的无关内容被添加进来，
			如果不小心清理，将会导致镜像极为臃肿。
		2,使用 docker commit 意味着所有对镜像的操作都是黑箱操作，生成的镜像也被称为黑箱镜像
			除了制作镜像的人知道执行过什么命令、怎么生成的镜像，别人根本无从得知。
		3,定制行为应该使用 Dockerfile 来完成。

保存镜像 (docker save 和 docker load)
	Docker 还提供了 docker load 和 docker save 命令，
	用以将镜像保存为一个 tar 文件，然后传输到另一个位置上，再加载进来。
	这是在没有 Docker Registry 时的做法，现在已经不推荐，
	镜像迁移应该直接使用 Docker Registry，无论是直接使用 Docker Hub 还是使用内网私有 Registry 都可以。
	保存镜像
		比如:希望保存这个 alpine 镜像。
			docker images alpine
		保存镜像的命令为：
			docker save alpine | gzip > alpine-latest.tar.gz
		然后我们将 alpine-latest.tar.gz 文件复制到了到了另一个机器上，可以用下面这个命令加载镜像：
			docker load -i alpine-latest.tar.gz
	如果我们结合这两个命令以及 ssh 甚至 pv 的话，利用 Linux 强大的管道，
	我们可以写一个命令完成从一个机器将镜像迁移到另一个机器，并且带进度条的功能：
		docker save <镜像名> | bzip2 | pv | ssh <用户名>@<主机名> 'cat | docker load'


删除镜像
	docker rmi [选项] <镜像1> [<镜像2> ...]
	# docker rmi image-id
	# docker rmi ${docker images -q}  //删除所有镜像

运行镜像
	# docker run --name [container-name] -d [image-name] -p [port:port]
	如:
	docker	run	-it	--rm ubuntu:14.04 bash
	-it :这是两个参数,一个是 -i:交互式操作,一个是-t终端。
	--rm :这个参数是说容器退出后随之将其删除。
	bash :放在镜像名后的是命令,这里我们希望有个交互式 Shell,因此用的是 bash 。


查看运行中的镜像副本
# docker ps
# docker ps -a //查看所有的镜像副本，包括启动失败，停止、运行中的

启动/停止镜像副本
	# docker start|stop container-name/contaoiner-id

删除镜像副本：
	# docker rm container-id
	# docker rm ${docker ps -a -q} //删除所有镜像副本

查看容器日志：
	# docker logs container-name/container-id

登录容器：
	# docker exec -it container-id/container-name bash
